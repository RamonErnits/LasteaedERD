// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TARge20.Data;

namespace TARge20.Data.Migrations
{
    [DbContext(typeof(TARge20DbContext))]
    partial class TARge20DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TARge20.Core.Domain.Absence", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildrenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dat")
                        .HasColumnType("datetime2");

                    b.Property<string>("reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ChildrenId");

                    b.ToTable("Puudumine");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Children", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("KindergartenId");

                    b.HasIndex("QueueId");

                    b.ToTable("lapsed");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Cook", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KitchenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("KitchenID");

                    b.ToTable("Kokk");
                });

            modelBuilder.Entity("TARge20.Core.Domain.EatingHistory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("dish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("portions")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("GroupId");

                    b.ToTable("Söömisajalugu");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Educator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KindergartenId");

                    b.ToTable("Kasvataja");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KindergartenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkingHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupHistoryId");

                    b.HasIndex("KindergartenId");

                    b.HasIndex("QueueId");

                    b.HasIndex("WorkingHistoryId");

                    b.ToTable("Grupp");
                });

            modelBuilder.Entity("TARge20.Core.Domain.GroupHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Grupiajalugu");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kindergarten", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Lasteaed");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Kitchen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Köök");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Menu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("KitchenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("dishes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KitchenID");

                    b.ToTable("Menüü");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Cookid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PositsionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositsionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Cookid");

                    b.HasIndex("EducatorId");

                    b.HasIndex("PositsionTypeId");

                    b.ToTable("Positsioon");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Queue_Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Järjekord");
                });

            modelBuilder.Entity("TARge20.Core.Domain.WorkingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tööajalugu");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Absence", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Children", null)
                        .WithMany("Absence_ID")
                        .HasForeignKey("ChildrenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Children", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Group", null)
                        .WithMany("Children_ID")
                        .HasForeignKey("GroupId");

                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("Children_ID")
                        .HasForeignKey("KindergartenId");

                    b.HasOne("TARge20.Core.Domain.Queue", null)
                        .WithMany("Children_ID")
                        .HasForeignKey("QueueId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Cook", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kitchen", null)
                        .WithMany("Cook_ID")
                        .HasForeignKey("KitchenID");
                });

            modelBuilder.Entity("TARge20.Core.Domain.EatingHistory", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Group", null)
                        .WithMany("EatingHistory_ID")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Educator", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("Educator_ID")
                        .HasForeignKey("KindergartenId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Group", b =>
                {
                    b.HasOne("TARge20.Core.Domain.GroupHistory", null)
                        .WithMany("Group_ID")
                        .HasForeignKey("GroupHistoryId");

                    b.HasOne("TARge20.Core.Domain.Kindergarten", null)
                        .WithMany("Group_ID")
                        .HasForeignKey("KindergartenId");

                    b.HasOne("TARge20.Core.Domain.Queue", null)
                        .WithMany("Group_ID")
                        .HasForeignKey("QueueId");

                    b.HasOne("TARge20.Core.Domain.WorkingHistory", null)
                        .WithMany("Group_ID")
                        .HasForeignKey("WorkingHistoryId");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Menu", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Kitchen", null)
                        .WithMany("Menu_ID")
                        .HasForeignKey("KitchenID");
                });

            modelBuilder.Entity("TARge20.Core.Domain.Position", b =>
                {
                    b.HasOne("TARge20.Core.Domain.Cook", null)
                        .WithMany("Positsion_ID")
                        .HasForeignKey("Cookid");

                    b.HasOne("TARge20.Core.Domain.Educator", null)
                        .WithMany("Position_ID")
                        .HasForeignKey("EducatorId");

                    b.HasOne("TARge20.Core.Domain.Position", "PositsionType")
                        .WithMany()
                        .HasForeignKey("PositsionTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
